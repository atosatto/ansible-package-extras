#!/usr/bin/python
# -*- coding: utf-8 -*-

import apt

DOCUMENTATION = """
---
module: apt_madison
short_description: Extract the available versions of a package from the APT cache.
description:
  - This module extracts available versions of a package from the APT cache.
options:
  name:
    required: true
    description:
      - Name of the package.
    aliases: [ pkg, package ]
  update_cache:
    required: false
    default: no
    choices: [ no, yes ]
    description:
      - Run the equivalent of `apt-get update` before the operation.
requirements: [ python-apt ]
"""

def main():
    module = AnsibleModule(
        argument_spec=dict(
            package=dict(required=True, aliases=['pkg', 'name'], type='str'),
            update_cache = dict(default=False, aliases=['update-cache'], type='bool')
        ),
        supports_check_mode=True)

    cache = apt.Cache()
    if module.params.get('update_cache'):
        cache.update()

    pkg_name = module.params.get('package')
    pkg_versions = None
    try:
        pkg_versions = cache[pkg_name].versions
    except:
        module.fail_json(msg="Could not find package %s in the apt cache." % pkg_name)

    retvals = []
    for v in pkg_versions:
        for repo in v.origins:
            retvals.append({
                "name": pkg_name,
                "version": v.version,
                "architecture": v.architecture,
                "raw_description": v.raw_description,
                "size": v.size,
                "repo_name": repo.origin,
                "repo_archive": repo.archive,
                "repo_component": repo.component,
                "repo_site": repo.site,
                "repo_label": repo.label,
                "repo_trusted": repo.trusted
            })

    module.exit_json(changed=False, versions=retvals)

# import module snippets
from ansible.module_utils.basic import *
if __name__ == '__main__':
    main()
